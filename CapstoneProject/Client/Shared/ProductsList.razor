@inject IProductService ProductService
@implements IDisposable;


@if (ProductService.Products == null)
{
    <h2>@ProductService.Message</h2>
    <br />
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="#">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.ProductId">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPricing(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
}


@code {
    
    // *** Re-rendering the component when the product is called in the Index.razor page. This render will occur when
    // the productsList needs to be filtered by a categoryUrl
    protected override void OnInitialized()
    {
        ProductService.ChangeOnComponent += StateHasChanged;
    }

    
    public void Dispose()
    {
        ProductService.ChangeOnComponent -= StateHasChanged;
    }


    private string GetPricing(Product product)
    {
        var variant = product.ProductVariants;
        var minPrice = variant.Min(p => p.Price);

        
        switch (variant.Count)
        {
            case 0:
                return string.Empty;
            case 1:
                return $"${variant[0].Price}";
            default:
                return $"Starting at ${minPrice}";
        }
    }
}