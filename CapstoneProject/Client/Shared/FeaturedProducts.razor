@inject IProductService ProductService
@implements IDisposable


<div style="text-align: center;"><h2>Top Products Today</h2></div>


@* Displaying the featured products if the count of the products is greater than zero and if there are any  *@
@* featured products in the products list *@

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.ProductId">
                            <img src="@product.ImageUrl" alt="@product.Title">
                        </a>
                    </div>
                    <h4 a href="product/@product.ProductId">@product.Title</h4>
                    @if (product.ProductVariants is {Count: > 0 })
                    {
                        <h5 class="price">
                            @product.ProductVariants[0].Price
                        </h5>
                    }
                </div>
            }
        }
    </div>
}


@code {
    protected override void OnInitialized()
    {
        ProductService.ChangeOnComponent += StateHasChanged;
    }

    
    public void Dispose()
    {
        ProductService.ChangeOnComponent -= StateHasChanged;
    }

}